# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Sensors', [dirname(__file__)])
        except ImportError:
            import _Sensors
            return _Sensors
        if fp is not None:
            try:
                _mod = imp.load_module('_Sensors', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Sensors = swig_import_helper()
    del swig_import_helper
else:
    import _Sensors
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAX_BUF2 = _Sensors.MAX_BUF2
SYSFS_GPIO_DIR = _Sensors.SYSFS_GPIO_DIR
POLL_TIMEOUT = _Sensors.POLL_TIMEOUT
MAX_BUF = _Sensors.MAX_BUF
INPUT_PIN = _Sensors.INPUT_PIN
OUTPUT_PIN = _Sensors.OUTPUT_PIN
LOW = _Sensors.LOW
HIGH = _Sensors.HIGH

def adc_read(*args):
  return _Sensors.adc_read(*args)
adc_read = _Sensors.adc_read

def adc_init():
  return _Sensors.adc_init()
adc_init = _Sensors.adc_init

def joystick_init():
  return _Sensors.joystick_init()
joystick_init = _Sensors.joystick_init

def read_joystick():
  return _Sensors.read_joystick()
read_joystick = _Sensors.read_joystick

def read_voltage():
  return _Sensors.read_voltage()
read_voltage = _Sensors.read_voltage

def gpio_export(*args):
  return _Sensors.gpio_export(*args)
gpio_export = _Sensors.gpio_export

def gpio_unexport(*args):
  return _Sensors.gpio_unexport(*args)
gpio_unexport = _Sensors.gpio_unexport

def gpio_set_dir(*args):
  return _Sensors.gpio_set_dir(*args)
gpio_set_dir = _Sensors.gpio_set_dir

def gpio_set_value(*args):
  return _Sensors.gpio_set_value(*args)
gpio_set_value = _Sensors.gpio_set_value

def gpio_get_value(*args):
  return _Sensors.gpio_get_value(*args)
gpio_get_value = _Sensors.gpio_get_value

def gpio_set_edge(*args):
  return _Sensors.gpio_set_edge(*args)
gpio_set_edge = _Sensors.gpio_set_edge

def gpio_fd_open(*args):
  return _Sensors.gpio_fd_open(*args)
gpio_fd_open = _Sensors.gpio_fd_open

def gpio_fd_close(*args):
  return _Sensors.gpio_fd_close(*args)
gpio_fd_close = _Sensors.gpio_fd_close
# This file is compatible with both classic and new-style classes.

cvar = _Sensors.cvar
RS = cvar.RS
VOLTAGE_REF = cvar.VOLTAGE_REF

